// Package openapi provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /)
	GetHomePage(ctx echo.Context) error

	// (GET /healthz)
	HealthCheck(ctx echo.Context) error

	// (GET /pets)
	FindPets(ctx echo.Context, params FindPetsParams) error

	// (POST /pets)
	AddPet(ctx echo.Context) error

	// (DELETE /pets/{id})
	DeletePet(ctx echo.Context, id int64) error

	// (GET /pets/{id})
	FindPetById(ctx echo.Context, id int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetHomePage converts echo context to params.
func (w *ServerInterfaceWrapper) GetHomePage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHomePage(ctx)
	return err
}

// HealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) HealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.HealthCheck(ctx)
	return err
}

// FindPets converts echo context to params.
func (w *ServerInterfaceWrapper) FindPets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsParams
	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPets(ctx, params)
	return err
}

// AddPet converts echo context to params.
func (w *ServerInterfaceWrapper) AddPet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddPet(ctx)
	return err
}

// DeletePet converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePet(ctx, id)
	return err
}

// FindPetById converts echo context to params.
func (w *ServerInterfaceWrapper) FindPetById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPetById(ctx, id)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/", wrapper.GetHomePage)
	router.GET("/healthz", wrapper.HealthCheck)
	router.GET("/pets", wrapper.FindPets)
	router.POST("/pets", wrapper.AddPet)
	router.DELETE("/pets/:id", wrapper.DeletePet)
	router.GET("/pets/:id", wrapper.FindPetById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
