// Package openapi provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /)
	GetHomePage(ctx echo.Context) error

	// (GET /health)
	HealthCheck(ctx echo.Context) error

	// (GET /pets)
	FindPets(ctx echo.Context, params FindPetsParams) error

	// (POST /pets)
	AddPet(ctx echo.Context) error

	// (DELETE /pets/{id})
	DeletePet(ctx echo.Context, id int64) error

	// (GET /pets/{id})
	FindPetById(ctx echo.Context, id int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetHomePage converts echo context to params.
func (w *ServerInterfaceWrapper) GetHomePage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHomePage(ctx)
	return err
}

// HealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) HealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.HealthCheck(ctx)
	return err
}

// FindPets converts echo context to params.
func (w *ServerInterfaceWrapper) FindPets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsParams
	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPets(ctx, params)
	return err
}

// AddPet converts echo context to params.
func (w *ServerInterfaceWrapper) AddPet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddPet(ctx)
	return err
}

// DeletePet converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePet(ctx, id)
	return err
}

// FindPetById converts echo context to params.
func (w *ServerInterfaceWrapper) FindPetById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPetById(ctx, id)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/", wrapper.GetHomePage)
	router.GET("/health", wrapper.HealthCheck)
	router.GET("/pets", wrapper.FindPets)
	router.POST("/pets", wrapper.AddPet)
	router.DELETE("/pets/:id", wrapper.DeletePet)
	router.GET("/pets/:id", wrapper.FindPetById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
